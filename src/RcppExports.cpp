// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// Corr_to_Part
arma::mat Corr_to_Part(int d, arma::mat correlations, arma::mat partials);
RcppExport SEXP _GERGM_Corr_to_Part(SEXP dSEXP, SEXP correlationsSEXP, SEXP partialsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type d(dSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type correlations(correlationsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type partials(partialsSEXP);
    rcpp_result_gen = Rcpp::wrap(Corr_to_Part(d, correlations, partials));
    return rcpp_result_gen;
END_RCPP
}
// Extended_Metropolis_Hastings_Sampler
List Extended_Metropolis_Hastings_Sampler(int number_of_iterations, double shape_parameter, int number_of_nodes, arma::vec statistics_to_use, arma::mat initial_network, int take_sample_every, arma::vec thetas, arma::Mat<double> triples, arma::Mat<double> pairs, arma::vec alphas, int together, int seed, int number_of_samples_to_store, int using_correlation_network, int undirect_network, bool parallel, arma::umat use_selected_rows, arma::umat save_statistics_selected_rows_matrix, arma::vec rows_to_use, arma::vec base_statistics_to_save, arma::vec base_statistic_alphas, int num_non_base_statistics, arma::vec non_base_statistic_indicator, double p_ratio_multaplicative_factor, Rcpp::List random_triad_sample_list, Rcpp::List random_dyad_sample_list, bool use_triad_sampling, int num_unique_random_triad_samples, bool include_diagonal);
RcppExport SEXP _GERGM_Extended_Metropolis_Hastings_Sampler(SEXP number_of_iterationsSEXP, SEXP shape_parameterSEXP, SEXP number_of_nodesSEXP, SEXP statistics_to_useSEXP, SEXP initial_networkSEXP, SEXP take_sample_everySEXP, SEXP thetasSEXP, SEXP triplesSEXP, SEXP pairsSEXP, SEXP alphasSEXP, SEXP togetherSEXP, SEXP seedSEXP, SEXP number_of_samples_to_storeSEXP, SEXP using_correlation_networkSEXP, SEXP undirect_networkSEXP, SEXP parallelSEXP, SEXP use_selected_rowsSEXP, SEXP save_statistics_selected_rows_matrixSEXP, SEXP rows_to_useSEXP, SEXP base_statistics_to_saveSEXP, SEXP base_statistic_alphasSEXP, SEXP num_non_base_statisticsSEXP, SEXP non_base_statistic_indicatorSEXP, SEXP p_ratio_multaplicative_factorSEXP, SEXP random_triad_sample_listSEXP, SEXP random_dyad_sample_listSEXP, SEXP use_triad_samplingSEXP, SEXP num_unique_random_triad_samplesSEXP, SEXP include_diagonalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type number_of_iterations(number_of_iterationsSEXP);
    Rcpp::traits::input_parameter< double >::type shape_parameter(shape_parameterSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_nodes(number_of_nodesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type statistics_to_use(statistics_to_useSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type initial_network(initial_networkSEXP);
    Rcpp::traits::input_parameter< int >::type take_sample_every(take_sample_everySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type thetas(thetasSEXP);
    Rcpp::traits::input_parameter< arma::Mat<double> >::type triples(triplesSEXP);
    Rcpp::traits::input_parameter< arma::Mat<double> >::type pairs(pairsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alphas(alphasSEXP);
    Rcpp::traits::input_parameter< int >::type together(togetherSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_samples_to_store(number_of_samples_to_storeSEXP);
    Rcpp::traits::input_parameter< int >::type using_correlation_network(using_correlation_networkSEXP);
    Rcpp::traits::input_parameter< int >::type undirect_network(undirect_networkSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type use_selected_rows(use_selected_rowsSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type save_statistics_selected_rows_matrix(save_statistics_selected_rows_matrixSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type rows_to_use(rows_to_useSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type base_statistics_to_save(base_statistics_to_saveSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type base_statistic_alphas(base_statistic_alphasSEXP);
    Rcpp::traits::input_parameter< int >::type num_non_base_statistics(num_non_base_statisticsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type non_base_statistic_indicator(non_base_statistic_indicatorSEXP);
    Rcpp::traits::input_parameter< double >::type p_ratio_multaplicative_factor(p_ratio_multaplicative_factorSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type random_triad_sample_list(random_triad_sample_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type random_dyad_sample_list(random_dyad_sample_listSEXP);
    Rcpp::traits::input_parameter< bool >::type use_triad_sampling(use_triad_samplingSEXP);
    Rcpp::traits::input_parameter< int >::type num_unique_random_triad_samples(num_unique_random_triad_samplesSEXP);
    Rcpp::traits::input_parameter< bool >::type include_diagonal(include_diagonalSEXP);
    rcpp_result_gen = Rcpp::wrap(Extended_Metropolis_Hastings_Sampler(number_of_iterations, shape_parameter, number_of_nodes, statistics_to_use, initial_network, take_sample_every, thetas, triples, pairs, alphas, together, seed, number_of_samples_to_store, using_correlation_network, undirect_network, parallel, use_selected_rows, save_statistics_selected_rows_matrix, rows_to_use, base_statistics_to_save, base_statistic_alphas, num_non_base_statistics, non_base_statistic_indicator, p_ratio_multaplicative_factor, random_triad_sample_list, random_dyad_sample_list, use_triad_sampling, num_unique_random_triad_samples, include_diagonal));
    return rcpp_result_gen;
END_RCPP
}
// h_statistics
arma::vec h_statistics(arma::vec statistics_to_use, arma::mat current_edge_weights, arma::Mat<double> triples, arma::Mat<double> pairs, arma::vec alphas, int together, arma::umat save_statistics_selected_rows_matrix, arma::vec rows_to_use, arma::vec base_statistics_to_save, arma::vec base_statistic_alphas, int num_non_base_statistics, arma::vec non_base_statistic_indicator);
RcppExport SEXP _GERGM_h_statistics(SEXP statistics_to_useSEXP, SEXP current_edge_weightsSEXP, SEXP triplesSEXP, SEXP pairsSEXP, SEXP alphasSEXP, SEXP togetherSEXP, SEXP save_statistics_selected_rows_matrixSEXP, SEXP rows_to_useSEXP, SEXP base_statistics_to_saveSEXP, SEXP base_statistic_alphasSEXP, SEXP num_non_base_statisticsSEXP, SEXP non_base_statistic_indicatorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type statistics_to_use(statistics_to_useSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type current_edge_weights(current_edge_weightsSEXP);
    Rcpp::traits::input_parameter< arma::Mat<double> >::type triples(triplesSEXP);
    Rcpp::traits::input_parameter< arma::Mat<double> >::type pairs(pairsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alphas(alphasSEXP);
    Rcpp::traits::input_parameter< int >::type together(togetherSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type save_statistics_selected_rows_matrix(save_statistics_selected_rows_matrixSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type rows_to_use(rows_to_useSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type base_statistics_to_save(base_statistics_to_saveSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type base_statistic_alphas(base_statistic_alphasSEXP);
    Rcpp::traits::input_parameter< int >::type num_non_base_statistics(num_non_base_statisticsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type non_base_statistic_indicator(non_base_statistic_indicatorSEXP);
    rcpp_result_gen = Rcpp::wrap(h_statistics(statistics_to_use, current_edge_weights, triples, pairs, alphas, together, save_statistics_selected_rows_matrix, rows_to_use, base_statistics_to_save, base_statistic_alphas, num_non_base_statistics, non_base_statistic_indicator));
    return rcpp_result_gen;
END_RCPP
}
// extended_weighted_mple_objective
double extended_weighted_mple_objective(int number_of_nodes, arma::vec statistics_to_use, arma::mat current_network, arma::Mat<double> triples, arma::Mat<double> pairs, arma::umat save_statistics_selected_rows_matrix, arma::vec rows_to_use, arma::vec base_statistics_to_save, arma::vec base_statistic_alphas, int num_non_base_statistics, arma::vec non_base_statistic_indicator, arma::vec thetas, arma::vec alphas, int together, arma::vec integration_interval, bool parallel);
RcppExport SEXP _GERGM_extended_weighted_mple_objective(SEXP number_of_nodesSEXP, SEXP statistics_to_useSEXP, SEXP current_networkSEXP, SEXP triplesSEXP, SEXP pairsSEXP, SEXP save_statistics_selected_rows_matrixSEXP, SEXP rows_to_useSEXP, SEXP base_statistics_to_saveSEXP, SEXP base_statistic_alphasSEXP, SEXP num_non_base_statisticsSEXP, SEXP non_base_statistic_indicatorSEXP, SEXP thetasSEXP, SEXP alphasSEXP, SEXP togetherSEXP, SEXP integration_intervalSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type number_of_nodes(number_of_nodesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type statistics_to_use(statistics_to_useSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type current_network(current_networkSEXP);
    Rcpp::traits::input_parameter< arma::Mat<double> >::type triples(triplesSEXP);
    Rcpp::traits::input_parameter< arma::Mat<double> >::type pairs(pairsSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type save_statistics_selected_rows_matrix(save_statistics_selected_rows_matrixSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type rows_to_use(rows_to_useSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type base_statistics_to_save(base_statistics_to_saveSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type base_statistic_alphas(base_statistic_alphasSEXP);
    Rcpp::traits::input_parameter< int >::type num_non_base_statistics(num_non_base_statisticsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type non_base_statistic_indicator(non_base_statistic_indicatorSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type thetas(thetasSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alphas(alphasSEXP);
    Rcpp::traits::input_parameter< int >::type together(togetherSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type integration_interval(integration_intervalSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    rcpp_result_gen = Rcpp::wrap(extended_weighted_mple_objective(number_of_nodes, statistics_to_use, current_network, triples, pairs, save_statistics_selected_rows_matrix, rows_to_use, base_statistics_to_save, base_statistic_alphas, num_non_base_statistics, non_base_statistic_indicator, thetas, alphas, together, integration_interval, parallel));
    return rcpp_result_gen;
END_RCPP
}
// mple_distribution_objective
double mple_distribution_objective(int number_of_nodes, arma::vec statistics_to_use, arma::mat current_network, arma::Mat<double> triples, arma::Mat<double> pairs, arma::umat save_statistics_selected_rows_matrix, arma::vec rows_to_use, arma::vec base_statistics_to_save, arma::vec base_statistic_alphas, int num_non_base_statistics, arma::vec non_base_statistic_indicator, arma::vec thetas, arma::vec alphas, int together, arma::vec integration_interval, bool parallel);
RcppExport SEXP _GERGM_mple_distribution_objective(SEXP number_of_nodesSEXP, SEXP statistics_to_useSEXP, SEXP current_networkSEXP, SEXP triplesSEXP, SEXP pairsSEXP, SEXP save_statistics_selected_rows_matrixSEXP, SEXP rows_to_useSEXP, SEXP base_statistics_to_saveSEXP, SEXP base_statistic_alphasSEXP, SEXP num_non_base_statisticsSEXP, SEXP non_base_statistic_indicatorSEXP, SEXP thetasSEXP, SEXP alphasSEXP, SEXP togetherSEXP, SEXP integration_intervalSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type number_of_nodes(number_of_nodesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type statistics_to_use(statistics_to_useSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type current_network(current_networkSEXP);
    Rcpp::traits::input_parameter< arma::Mat<double> >::type triples(triplesSEXP);
    Rcpp::traits::input_parameter< arma::Mat<double> >::type pairs(pairsSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type save_statistics_selected_rows_matrix(save_statistics_selected_rows_matrixSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type rows_to_use(rows_to_useSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type base_statistics_to_save(base_statistics_to_saveSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type base_statistic_alphas(base_statistic_alphasSEXP);
    Rcpp::traits::input_parameter< int >::type num_non_base_statistics(num_non_base_statisticsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type non_base_statistic_indicator(non_base_statistic_indicatorSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type thetas(thetasSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alphas(alphasSEXP);
    Rcpp::traits::input_parameter< int >::type together(togetherSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type integration_interval(integration_intervalSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    rcpp_result_gen = Rcpp::wrap(mple_distribution_objective(number_of_nodes, statistics_to_use, current_network, triples, pairs, save_statistics_selected_rows_matrix, rows_to_use, base_statistics_to_save, base_statistic_alphas, num_non_base_statistics, non_base_statistic_indicator, thetas, alphas, together, integration_interval, parallel));
    return rcpp_result_gen;
END_RCPP
}
// get_indiviual_triad_values
arma::vec get_indiviual_triad_values(arma::mat net, arma::Mat<double> triples, double alpha, int together);
RcppExport SEXP _GERGM_get_indiviual_triad_values(SEXP netSEXP, SEXP triplesSEXP, SEXP alphaSEXP, SEXP togetherSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type net(netSEXP);
    Rcpp::traits::input_parameter< arma::Mat<double> >::type triples(triplesSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type together(togetherSEXP);
    rcpp_result_gen = Rcpp::wrap(get_indiviual_triad_values(net, triples, alpha, together));
    return rcpp_result_gen;
END_RCPP
}
// get_triad_weights
arma::vec get_triad_weights(arma::mat net, arma::Mat<double> triples, double alpha, int together, double smoothing_parameter);
RcppExport SEXP _GERGM_get_triad_weights(SEXP netSEXP, SEXP triplesSEXP, SEXP alphaSEXP, SEXP togetherSEXP, SEXP smoothing_parameterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type net(netSEXP);
    Rcpp::traits::input_parameter< arma::Mat<double> >::type triples(triplesSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type together(togetherSEXP);
    Rcpp::traits::input_parameter< double >::type smoothing_parameter(smoothing_parameterSEXP);
    rcpp_result_gen = Rcpp::wrap(get_triad_weights(net, triples, alpha, together, smoothing_parameter));
    return rcpp_result_gen;
END_RCPP
}
// Individual_Edge_Conditional_Prediction
List Individual_Edge_Conditional_Prediction(int number_of_iterations, double shape_parameter, int number_of_nodes, arma::vec statistics_to_use, arma::mat initial_network, int take_sample_every, arma::vec thetas, arma::Mat<double> triples, arma::Mat<double> pairs, arma::vec alphas, int together, int seed, int number_of_samples_to_store, int using_correlation_network, int undirect_network, bool parallel, arma::umat use_selected_rows, arma::umat save_statistics_selected_rows_matrix, arma::vec rows_to_use, arma::vec base_statistics_to_save, arma::vec base_statistic_alphas, int num_non_base_statistics, arma::vec non_base_statistic_indicator, double p_ratio_multaplicative_factor, Rcpp::List random_triad_sample_list, Rcpp::List random_dyad_sample_list, bool use_triad_sampling, int num_unique_random_triad_samples, int i, int j);
RcppExport SEXP _GERGM_Individual_Edge_Conditional_Prediction(SEXP number_of_iterationsSEXP, SEXP shape_parameterSEXP, SEXP number_of_nodesSEXP, SEXP statistics_to_useSEXP, SEXP initial_networkSEXP, SEXP take_sample_everySEXP, SEXP thetasSEXP, SEXP triplesSEXP, SEXP pairsSEXP, SEXP alphasSEXP, SEXP togetherSEXP, SEXP seedSEXP, SEXP number_of_samples_to_storeSEXP, SEXP using_correlation_networkSEXP, SEXP undirect_networkSEXP, SEXP parallelSEXP, SEXP use_selected_rowsSEXP, SEXP save_statistics_selected_rows_matrixSEXP, SEXP rows_to_useSEXP, SEXP base_statistics_to_saveSEXP, SEXP base_statistic_alphasSEXP, SEXP num_non_base_statisticsSEXP, SEXP non_base_statistic_indicatorSEXP, SEXP p_ratio_multaplicative_factorSEXP, SEXP random_triad_sample_listSEXP, SEXP random_dyad_sample_listSEXP, SEXP use_triad_samplingSEXP, SEXP num_unique_random_triad_samplesSEXP, SEXP iSEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type number_of_iterations(number_of_iterationsSEXP);
    Rcpp::traits::input_parameter< double >::type shape_parameter(shape_parameterSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_nodes(number_of_nodesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type statistics_to_use(statistics_to_useSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type initial_network(initial_networkSEXP);
    Rcpp::traits::input_parameter< int >::type take_sample_every(take_sample_everySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type thetas(thetasSEXP);
    Rcpp::traits::input_parameter< arma::Mat<double> >::type triples(triplesSEXP);
    Rcpp::traits::input_parameter< arma::Mat<double> >::type pairs(pairsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alphas(alphasSEXP);
    Rcpp::traits::input_parameter< int >::type together(togetherSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_samples_to_store(number_of_samples_to_storeSEXP);
    Rcpp::traits::input_parameter< int >::type using_correlation_network(using_correlation_networkSEXP);
    Rcpp::traits::input_parameter< int >::type undirect_network(undirect_networkSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type use_selected_rows(use_selected_rowsSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type save_statistics_selected_rows_matrix(save_statistics_selected_rows_matrixSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type rows_to_use(rows_to_useSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type base_statistics_to_save(base_statistics_to_saveSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type base_statistic_alphas(base_statistic_alphasSEXP);
    Rcpp::traits::input_parameter< int >::type num_non_base_statistics(num_non_base_statisticsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type non_base_statistic_indicator(non_base_statistic_indicatorSEXP);
    Rcpp::traits::input_parameter< double >::type p_ratio_multaplicative_factor(p_ratio_multaplicative_factorSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type random_triad_sample_list(random_triad_sample_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type random_dyad_sample_list(random_dyad_sample_listSEXP);
    Rcpp::traits::input_parameter< bool >::type use_triad_sampling(use_triad_samplingSEXP);
    Rcpp::traits::input_parameter< int >::type num_unique_random_triad_samples(num_unique_random_triad_samplesSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    rcpp_result_gen = Rcpp::wrap(Individual_Edge_Conditional_Prediction(number_of_iterations, shape_parameter, number_of_nodes, statistics_to_use, initial_network, take_sample_every, thetas, triples, pairs, alphas, together, seed, number_of_samples_to_store, using_correlation_network, undirect_network, parallel, use_selected_rows, save_statistics_selected_rows_matrix, rows_to_use, base_statistics_to_save, base_statistic_alphas, num_non_base_statistics, non_base_statistic_indicator, p_ratio_multaplicative_factor, random_triad_sample_list, random_dyad_sample_list, use_triad_sampling, num_unique_random_triad_samples, i, j));
    return rcpp_result_gen;
END_RCPP
}
// Distribution_Metropolis_Hastings_Sampler
List Distribution_Metropolis_Hastings_Sampler(int number_of_iterations, double variance, int number_of_nodes, arma::vec statistics_to_use, arma::mat initial_network, int take_sample_every, arma::vec thetas, arma::Mat<double> triples, arma::Mat<double> pairs, arma::vec alphas, int together, int seed, int number_of_samples_to_store, bool parallel, arma::umat use_selected_rows, arma::umat save_statistics_selected_rows_matrix, arma::vec rows_to_use, arma::vec base_statistics_to_save, arma::vec base_statistic_alphas, int num_non_base_statistics, arma::vec non_base_statistic_indicator, double p_ratio_multaplicative_factor, Rcpp::List random_triad_sample_list, Rcpp::List random_dyad_sample_list, bool use_triad_sampling, int num_unique_random_triad_samples, bool rowwise_distribution);
RcppExport SEXP _GERGM_Distribution_Metropolis_Hastings_Sampler(SEXP number_of_iterationsSEXP, SEXP varianceSEXP, SEXP number_of_nodesSEXP, SEXP statistics_to_useSEXP, SEXP initial_networkSEXP, SEXP take_sample_everySEXP, SEXP thetasSEXP, SEXP triplesSEXP, SEXP pairsSEXP, SEXP alphasSEXP, SEXP togetherSEXP, SEXP seedSEXP, SEXP number_of_samples_to_storeSEXP, SEXP parallelSEXP, SEXP use_selected_rowsSEXP, SEXP save_statistics_selected_rows_matrixSEXP, SEXP rows_to_useSEXP, SEXP base_statistics_to_saveSEXP, SEXP base_statistic_alphasSEXP, SEXP num_non_base_statisticsSEXP, SEXP non_base_statistic_indicatorSEXP, SEXP p_ratio_multaplicative_factorSEXP, SEXP random_triad_sample_listSEXP, SEXP random_dyad_sample_listSEXP, SEXP use_triad_samplingSEXP, SEXP num_unique_random_triad_samplesSEXP, SEXP rowwise_distributionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type number_of_iterations(number_of_iterationsSEXP);
    Rcpp::traits::input_parameter< double >::type variance(varianceSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_nodes(number_of_nodesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type statistics_to_use(statistics_to_useSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type initial_network(initial_networkSEXP);
    Rcpp::traits::input_parameter< int >::type take_sample_every(take_sample_everySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type thetas(thetasSEXP);
    Rcpp::traits::input_parameter< arma::Mat<double> >::type triples(triplesSEXP);
    Rcpp::traits::input_parameter< arma::Mat<double> >::type pairs(pairsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alphas(alphasSEXP);
    Rcpp::traits::input_parameter< int >::type together(togetherSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_samples_to_store(number_of_samples_to_storeSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type use_selected_rows(use_selected_rowsSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type save_statistics_selected_rows_matrix(save_statistics_selected_rows_matrixSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type rows_to_use(rows_to_useSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type base_statistics_to_save(base_statistics_to_saveSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type base_statistic_alphas(base_statistic_alphasSEXP);
    Rcpp::traits::input_parameter< int >::type num_non_base_statistics(num_non_base_statisticsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type non_base_statistic_indicator(non_base_statistic_indicatorSEXP);
    Rcpp::traits::input_parameter< double >::type p_ratio_multaplicative_factor(p_ratio_multaplicative_factorSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type random_triad_sample_list(random_triad_sample_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type random_dyad_sample_list(random_dyad_sample_listSEXP);
    Rcpp::traits::input_parameter< bool >::type use_triad_sampling(use_triad_samplingSEXP);
    Rcpp::traits::input_parameter< int >::type num_unique_random_triad_samples(num_unique_random_triad_samplesSEXP);
    Rcpp::traits::input_parameter< bool >::type rowwise_distribution(rowwise_distributionSEXP);
    rcpp_result_gen = Rcpp::wrap(Distribution_Metropolis_Hastings_Sampler(number_of_iterations, variance, number_of_nodes, statistics_to_use, initial_network, take_sample_every, thetas, triples, pairs, alphas, together, seed, number_of_samples_to_store, parallel, use_selected_rows, save_statistics_selected_rows_matrix, rows_to_use, base_statistics_to_save, base_statistic_alphas, num_non_base_statistics, non_base_statistic_indicator, p_ratio_multaplicative_factor, random_triad_sample_list, random_dyad_sample_list, use_triad_sampling, num_unique_random_triad_samples, rowwise_distribution));
    return rcpp_result_gen;
END_RCPP
}
// log_space_multinomial_sampler
int log_space_multinomial_sampler(arma::vec unnormalized_discrete_distribution, double uniform_draw);
RcppExport SEXP _GERGM_log_space_multinomial_sampler(SEXP unnormalized_discrete_distributionSEXP, SEXP uniform_drawSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type unnormalized_discrete_distribution(unnormalized_discrete_distributionSEXP);
    Rcpp::traits::input_parameter< double >::type uniform_draw(uniform_drawSEXP);
    rcpp_result_gen = Rcpp::wrap(log_space_multinomial_sampler(unnormalized_discrete_distribution, uniform_draw));
    return rcpp_result_gen;
END_RCPP
}
// Edge_Group_MH_Sampler
List Edge_Group_MH_Sampler(int number_of_iterations, double shape_parameter, int number_of_nodes, arma::vec statistics_to_use, arma::mat initial_network, int take_sample_every, arma::vec thetas, arma::Mat<double> triples, arma::Mat<double> pairs, arma::vec alphas, int together, int seed, int number_of_samples_to_store, int undirect_network, bool parallel, arma::umat use_selected_rows, arma::umat save_statistics_selected_rows_matrix, arma::vec rows_to_use, arma::vec base_statistics_to_save, arma::vec base_statistic_alphas, int num_non_base_statistics, arma::vec non_base_statistic_indicator, double p_ratio_multaplicative_factor, bool use_triad_sampling, bool include_diagonal, int sample_edges_at_a_time);
RcppExport SEXP _GERGM_Edge_Group_MH_Sampler(SEXP number_of_iterationsSEXP, SEXP shape_parameterSEXP, SEXP number_of_nodesSEXP, SEXP statistics_to_useSEXP, SEXP initial_networkSEXP, SEXP take_sample_everySEXP, SEXP thetasSEXP, SEXP triplesSEXP, SEXP pairsSEXP, SEXP alphasSEXP, SEXP togetherSEXP, SEXP seedSEXP, SEXP number_of_samples_to_storeSEXP, SEXP undirect_networkSEXP, SEXP parallelSEXP, SEXP use_selected_rowsSEXP, SEXP save_statistics_selected_rows_matrixSEXP, SEXP rows_to_useSEXP, SEXP base_statistics_to_saveSEXP, SEXP base_statistic_alphasSEXP, SEXP num_non_base_statisticsSEXP, SEXP non_base_statistic_indicatorSEXP, SEXP p_ratio_multaplicative_factorSEXP, SEXP use_triad_samplingSEXP, SEXP include_diagonalSEXP, SEXP sample_edges_at_a_timeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type number_of_iterations(number_of_iterationsSEXP);
    Rcpp::traits::input_parameter< double >::type shape_parameter(shape_parameterSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_nodes(number_of_nodesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type statistics_to_use(statistics_to_useSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type initial_network(initial_networkSEXP);
    Rcpp::traits::input_parameter< int >::type take_sample_every(take_sample_everySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type thetas(thetasSEXP);
    Rcpp::traits::input_parameter< arma::Mat<double> >::type triples(triplesSEXP);
    Rcpp::traits::input_parameter< arma::Mat<double> >::type pairs(pairsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alphas(alphasSEXP);
    Rcpp::traits::input_parameter< int >::type together(togetherSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_samples_to_store(number_of_samples_to_storeSEXP);
    Rcpp::traits::input_parameter< int >::type undirect_network(undirect_networkSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type use_selected_rows(use_selected_rowsSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type save_statistics_selected_rows_matrix(save_statistics_selected_rows_matrixSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type rows_to_use(rows_to_useSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type base_statistics_to_save(base_statistics_to_saveSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type base_statistic_alphas(base_statistic_alphasSEXP);
    Rcpp::traits::input_parameter< int >::type num_non_base_statistics(num_non_base_statisticsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type non_base_statistic_indicator(non_base_statistic_indicatorSEXP);
    Rcpp::traits::input_parameter< double >::type p_ratio_multaplicative_factor(p_ratio_multaplicative_factorSEXP);
    Rcpp::traits::input_parameter< bool >::type use_triad_sampling(use_triad_samplingSEXP);
    Rcpp::traits::input_parameter< bool >::type include_diagonal(include_diagonalSEXP);
    Rcpp::traits::input_parameter< int >::type sample_edges_at_a_time(sample_edges_at_a_timeSEXP);
    rcpp_result_gen = Rcpp::wrap(Edge_Group_MH_Sampler(number_of_iterations, shape_parameter, number_of_nodes, statistics_to_use, initial_network, take_sample_every, thetas, triples, pairs, alphas, together, seed, number_of_samples_to_store, undirect_network, parallel, use_selected_rows, save_statistics_selected_rows_matrix, rows_to_use, base_statistics_to_save, base_statistic_alphas, num_non_base_statistics, non_base_statistic_indicator, p_ratio_multaplicative_factor, use_triad_sampling, include_diagonal, sample_edges_at_a_time));
    return rcpp_result_gen;
END_RCPP
}
// frobenius_norm
double frobenius_norm(arma::mat mat1, arma::mat mat2);
RcppExport SEXP _GERGM_frobenius_norm(SEXP mat1SEXP, SEXP mat2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type mat1(mat1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mat2(mat2SEXP);
    rcpp_result_gen = Rcpp::wrap(frobenius_norm(mat1, mat2));
    return rcpp_result_gen;
END_RCPP
}
// Metropolis_Hastings_Sampler
List Metropolis_Hastings_Sampler(int number_of_iterations, double shape_parameter, int number_of_nodes, arma::vec statistics_to_use, arma::mat initial_network, int take_sample_every, arma::vec thetas, arma::mat triples, arma::mat pairs, arma::vec alphas, int together, int seed, int number_of_samples_to_store, int using_correlation_network, int undirect_network, bool parallel);
RcppExport SEXP _GERGM_Metropolis_Hastings_Sampler(SEXP number_of_iterationsSEXP, SEXP shape_parameterSEXP, SEXP number_of_nodesSEXP, SEXP statistics_to_useSEXP, SEXP initial_networkSEXP, SEXP take_sample_everySEXP, SEXP thetasSEXP, SEXP triplesSEXP, SEXP pairsSEXP, SEXP alphasSEXP, SEXP togetherSEXP, SEXP seedSEXP, SEXP number_of_samples_to_storeSEXP, SEXP using_correlation_networkSEXP, SEXP undirect_networkSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type number_of_iterations(number_of_iterationsSEXP);
    Rcpp::traits::input_parameter< double >::type shape_parameter(shape_parameterSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_nodes(number_of_nodesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type statistics_to_use(statistics_to_useSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type initial_network(initial_networkSEXP);
    Rcpp::traits::input_parameter< int >::type take_sample_every(take_sample_everySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type thetas(thetasSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type triples(triplesSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type pairs(pairsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alphas(alphasSEXP);
    Rcpp::traits::input_parameter< int >::type together(togetherSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_samples_to_store(number_of_samples_to_storeSEXP);
    Rcpp::traits::input_parameter< int >::type using_correlation_network(using_correlation_networkSEXP);
    Rcpp::traits::input_parameter< int >::type undirect_network(undirect_networkSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    rcpp_result_gen = Rcpp::wrap(Metropolis_Hastings_Sampler(number_of_iterations, shape_parameter, number_of_nodes, statistics_to_use, initial_network, take_sample_every, thetas, triples, pairs, alphas, together, seed, number_of_samples_to_store, using_correlation_network, undirect_network, parallel));
    return rcpp_result_gen;
END_RCPP
}
// weighted_mple_objective
double weighted_mple_objective(int number_of_nodes, arma::vec statistics_to_use, arma::mat current_network, arma::vec thetas, arma::mat triples, arma::mat pairs, arma::vec alphas, int together, arma::vec integration_interval, bool parallel);
RcppExport SEXP _GERGM_weighted_mple_objective(SEXP number_of_nodesSEXP, SEXP statistics_to_useSEXP, SEXP current_networkSEXP, SEXP thetasSEXP, SEXP triplesSEXP, SEXP pairsSEXP, SEXP alphasSEXP, SEXP togetherSEXP, SEXP integration_intervalSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type number_of_nodes(number_of_nodesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type statistics_to_use(statistics_to_useSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type current_network(current_networkSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type thetas(thetasSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type triples(triplesSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type pairs(pairsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alphas(alphasSEXP);
    Rcpp::traits::input_parameter< int >::type together(togetherSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type integration_interval(integration_intervalSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_mple_objective(number_of_nodes, statistics_to_use, current_network, thetas, triples, pairs, alphas, together, integration_interval, parallel));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_GERGM_Corr_to_Part", (DL_FUNC) &_GERGM_Corr_to_Part, 3},
    {"_GERGM_Extended_Metropolis_Hastings_Sampler", (DL_FUNC) &_GERGM_Extended_Metropolis_Hastings_Sampler, 29},
    {"_GERGM_h_statistics", (DL_FUNC) &_GERGM_h_statistics, 12},
    {"_GERGM_extended_weighted_mple_objective", (DL_FUNC) &_GERGM_extended_weighted_mple_objective, 16},
    {"_GERGM_mple_distribution_objective", (DL_FUNC) &_GERGM_mple_distribution_objective, 16},
    {"_GERGM_get_indiviual_triad_values", (DL_FUNC) &_GERGM_get_indiviual_triad_values, 4},
    {"_GERGM_get_triad_weights", (DL_FUNC) &_GERGM_get_triad_weights, 5},
    {"_GERGM_Individual_Edge_Conditional_Prediction", (DL_FUNC) &_GERGM_Individual_Edge_Conditional_Prediction, 30},
    {"_GERGM_Distribution_Metropolis_Hastings_Sampler", (DL_FUNC) &_GERGM_Distribution_Metropolis_Hastings_Sampler, 27},
    {"_GERGM_log_space_multinomial_sampler", (DL_FUNC) &_GERGM_log_space_multinomial_sampler, 2},
    {"_GERGM_Edge_Group_MH_Sampler", (DL_FUNC) &_GERGM_Edge_Group_MH_Sampler, 26},
    {"_GERGM_frobenius_norm", (DL_FUNC) &_GERGM_frobenius_norm, 2},
    {"_GERGM_Metropolis_Hastings_Sampler", (DL_FUNC) &_GERGM_Metropolis_Hastings_Sampler, 16},
    {"_GERGM_weighted_mple_objective", (DL_FUNC) &_GERGM_weighted_mple_objective, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_GERGM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
